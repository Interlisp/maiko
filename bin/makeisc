#************************************************************************/
#*									*/
#*	Makefile for Medley on Interactive Unix/386 2.2.1 under X.	*/
#*									*/
#*	(this way because ISC's csh won't work right for us)		*/
#*									*/
#************************************************************************/




#************************************************************************/
#*									*/
#*	(C) Copyright 1989, 1990, 1991 Venue. All Rights Reserved.	*/
#*	Manufactured in the United States of America.			*/
#*									*/
#************************************************************************/


# values for Maiko makefile variables
# These get overridden by OS and hardware-specific stuff
# in sub-makefiles

SRCDIR = ../src/
INCDIR = ../inc/
BINDIR = ./
RELDIR = ../RELEASE/
OBJECTDIR = /ISC.i386-x/
INSDIR = ../ISC.i386/
LDENAME = ldex
OSARCHNAME = ISC.i386
# for the files that need to be included in byte-swapped implementations:
BYTESWAPFILES =
SXHASHFILE = 
BITBLTFILE = 


# for files needed by color (actually files NOT needed by X)
COLORFILES =
# Options for SunOS4, SPARC and X-Window

XFILES = $(OBJECTDIR)XClose.o \
	$(OBJECTDIR)Cursor.o \
	$(OBJECTDIR)XWindow.o \
	$(OBJECTDIR)DoRing.o \
	$(OBJECTDIR)DoScroll.o \
	$(OBJECTDIR)XEvent.o \
	$(OBJECTDIR)XGravity.o \
	$(OBJECTDIR)XInit.o \
	$(OBJECTDIR)InitXevent.o \
	$(OBJECTDIR)XKbdMouse.o \
	$(OBJECTDIR)LispWindow.o \
        $(OBJECTDIR)LispXbitblt.o \
	$(OBJECTDIR)XKeyboard.o \
	$(OBJECTDIR)MakeXicon.o \
	$(OBJECTDIR)OpenDisplay.o \
	$(OBJECTDIR)ReadXoption.o \
	$(OBJECTDIR)XReconfig.o \
	$(OBJECTDIR)XScroll.o \
	$(OBJECTDIR)Scrollbar.o \
	$(OBJECTDIR)XCursor.o \
	$(OBJECTDIR)XMouse.o \
	$(OBJECTDIR)Subwindows.o \
	$(OBJECTDIR)VideoColor.o \
	$(OBJECTDIR)XWindowMgr.o  


XVERSION = XV11R4
XFLAGS = -DXWINDOW -D$(XVERSION)

FPFLAGS =
DFLAGS = -U__STDC__  -DNO_ASM -DBIGATOMS -DFSERROR -DAIX -DSYSVONLY -DSYSVSIGNALS -DNOASM -DLOGINT -DNOPIXRECT $(XFLAGS) -DBYTESWAP -DFLTINT -D_I386 -DNOETHER -DFORKCOMM -DISC
LDFLAGS = -lX11 -lc -lm -linet 

INLINE = 
BITBLTFILE = 
# for the files that need to be included in byte-swapped implementations:
BYTESWAPFILES = $(OBJECTDIR)byteswapfns$(OEXT)

# This is to make the %$#@! Apollo cc happy
OEXT = .o

OPTFLAGS = -O -fpcc-struct-return  -fstrength-reduce 
DISPOPTFLAGS = -O -fpcc-struct-return -fstrength-reduce  -finline-functions
CC = gcc

default: /$(OSARCHNAME)/$(LDENAME)

$(OBJECTDIR)xc.o :  $(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  \
	 $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
	 $(INCDIR)initatoms.h  $(INCDIR)gcdata.h  \
	 $(INCDIR)arith.h $(INCDIR)stream.h  $(INCDIR)dbprint.h\
	 $(INCDIR)tos1defs.h  $(INCDIR)tosretmacro.h \
	 $(INCDIR)tosfuncall.h  $(INCDIR)inlineC.h   \
	 $(INCDIR)profile.h $(INCDIR)inlinePS2.h
	$(CC) $(DISPRFLAGS) $(SRCDIR)xc.c $(INLINE) -o $(OBJECTDIR)xc.o


# remainder of makefile
#
#
#
#
#
#
# NOTE:  to add a NEW object file you must
#		1.	Add the file.o to one of the object file lists,
#			(i.e. OFILES, GCFILES, DEVICES, etc).
#		2.	Add the "how to make" & dependency info such as:
#
#	$(OBJECTDIR)<<file-name>>.o :  $(SRCDIR)<<file-name>>.c \
#		 $(INCDIR)lispemul.h  \
#		 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
#		 $(INCDIR)stack.h  $(INCDIR)emulglobal.h  $(INCDIR)lispmap.h \
#		 $(INCDIR)gcdata.h
#		$(CC) $(RFLAGS) $(SRCDIR)<<file-name>>.c $(INLINE) -o $(OBJECTDIR)<<file-name>>.o

# to build sysouts on the sun, you must do the following:
#	1. setenv OPTFLAGS '-DINIT -g'
#	2. rm objectdir/bitblt.c objectdir/dspsubrs.c objectdir/keyevent.c
#	3. makeright -e init
#	4. follow the instructions on {eris}<lispcore>sunloadup>howto-loadup-sunlisp.txt


# '90/04/23 osamu: $INSDIR is defined in makeright 
#
#INSDIR = $(RELDIR)install.$(RELEASENAME)/
CHKDIR = $(RELDIR)checksumdir/
NATDIR = $(RELDIR)usernative/

# OSARCHDIR is the os/architecture directory, where executables all go.
OSARCHDIR = /$(OSARCHNAME)/

#
#  The DISPxxx flags are for compiling files which rely on 'as' much
#  more than the other files do.  For mc68020, it'll use optimization
#  -O rather than -O2 which is good for the other files in the system
#  [JDS 10-26-89] Files affected: xc, arith2, arith4, fvar.
#

CFLAGS = $(OPTFLAGS) $(DFLAGS) $(FPFLAGS)
DISPCFLAGS = $(DISPOPTFLAGS) $(DFLAGS) $(FPFLAGS)
RFLAGS = -c $(CFLAGS) -I$(INCDIR)
DISPRFLAGS = -c $(DISPCFLAGS) -I$(INCDIR)

KEYON  = $(OBJECTDIR)keytester.o
KEYOFF = $(OBJECTDIR)keytestno.o

OFILES = $(OBJECTDIR)arith2.o \
	$(OBJECTDIR)arith3.o \
	$(OBJECTDIR)arith4.o \
	$(OBJECTDIR)array.o \
	$(OBJECTDIR)array2.o \
	$(OBJECTDIR)array3.o \
	$(OBJECTDIR)array4.o \
	$(OBJECTDIR)array5.o \
	$(OBJECTDIR)array6.o \
	$(OBJECTDIR)atom.o \
	$(OBJECTDIR)bin.o \
	$(OBJECTDIR)binds.o  \
	$(OBJECTDIR)bitblt.o  \
	$(OBJECTDIR)bitbltsub.o  \
	$(OBJECTDIR)blt.o \
	$(OBJECTDIR)car-cdr.o \
	$(OBJECTDIR)chardevice.o \
	$(OBJECTDIR)common.o \
	$(OBJECTDIR)conspage.o \
	$(OBJECTDIR)createcell.o \
	$(OBJECTDIR)draw.o \
	$(OBJECTDIR)findkey.o \
	$(OBJECTDIR)fvar.o \
	$(OBJECTDIR)xc.o \
	$(OBJECTDIR)gc.o \
	$(OBJECTDIR)gc2.o \
	$(OBJECTDIR)gvar2.o \
	$(OBJECTDIR)hardreturn.o \
	$(OBJECTDIR)inet.o \
	$(OBJECTDIR)intcall.o \
	$(OBJECTDIR)keylib.o \
	$(OBJECTDIR)lineblt8.o \
	$(OBJECTDIR)listhandle.o \
	$(OBJECTDIR)llcolor.o \
	$(OBJECTDIR)llstk.o \
	$(OBJECTDIR)loopsops.o \
	$(OBJECTDIR)lowlevel1.o \
	$(OBJECTDIR)lowlevel2.o \
	$(OBJECTDIR)misc7.o \
	$(OBJECTDIR)mvs.o \
	$(OBJECTDIR)return.o \
	$(OBJECTDIR)rplcons.o \
	$(OBJECTDIR)shift.o \
	$(OBJECTDIR)subr.o \
	$(OBJECTDIR)miscn.o \
	$(OBJECTDIR)subr0374.o \
	$(OBJECTDIR)timer.o \
	$(OBJECTDIR)typeof.o \
	$(OBJECTDIR)unwind.o \
	$(OBJECTDIR)vars3.o \
	$(OBJECTDIR)unixcomm.o \
	$(OBJECTDIR)uraid.o \
	$(OBJECTDIR)rpc.o \
        $(OBJECTDIR)ufn.o \
	$(OBJECTDIR)z2.o \
	$(OBJECTDIR)eqf.o \
	$(OBJECTDIR)fp.o \
	$(OBJECTDIR)ubf1.o \
	$(OBJECTDIR)ubf2.o \
	$(OBJECTDIR)ubf3.o \
	$(OBJECTDIR)unix-utils.o \
	$(OBJECTDIR)syscallmsg.o \
	$(OBJECTDIR)osmessage.o

GCFILES = $(OBJECTDIR)gcscan.o \
	$(OBJECTDIR)gcarrayops.o \
	$(OBJECTDIR)gccode.o \
	$(OBJECTDIR)gcfinal.o \
	$(OBJECTDIR)gcreccell.o \
	$(OBJECTDIR)gchtfind.o \
	$(OBJECTDIR)gcmain3.o \
	$(OBJECTDIR)gcreclaim.o \
	$(OBJECTDIR)gchoverflow.o

DEVICES = $(OBJECTDIR)dspsubrs.o \
	$(OBJECTDIR)initdisplay.o \
	$(OBJECTDIR)dsk.o \
	$(OBJECTDIR)ufs.o \
	$(OBJECTDIR)directory.o \
	$(OBJECTDIR)keyevent.o \
	$(OBJECTDIR)kbdsubrs.o \
	$(OBJECTDIR)ether.o \
	$(OBJECTDIR)initkbd.o

TESTFILES = $(OBJECTDIR)debugtools.o \
	$(OBJECTDIR)testtool.o \
	$(OBJECTDIR)Kprint.o

MAINFILES = $(OBJECTDIR)main.o \
	$(OBJECTDIR)initsysout.o \
	$(OBJECTDIR)storage.o \
	$(OBJECTDIR)allocmds.o \
	$(OBJECTDIR)vmemsave.o \
	$(OBJECTDIR)newmakeatom.o \
	$(OBJECTDIR)loadsysout.o

SXHASHFILE = $(OBJECTDIR)sxhash.o

VFILE = $(OBJECTDIR)vdate

DEVFILES = $(OFILES) $(KEYOFF) $(TESTFILES) $(BYTESWAPFILES) $(MAINFILES) $(DEVICES) \
	$(GCFILES) $(SXHASHFILE) $(BITBLTFILE) $(XFILES) $(COLORFILES)
LIBFILES = $(OFILES) $(KEYON)  $(TESTFILES) $(BYTESWAPFILES) $(MAINFILES) $(DEVICES) \
	$(GCFILES) $(SXHASHFILE) $(BITBLTFILE) $(XFILES) $(COLORFILES)
EXTFILES = $(OBJECTDIR)usersubrs.o

# execute to make /tmp/vdate.c

################################################################################
# Development targets - copyprotect is OFF here
################################################################################

default	: $(OSARCHDIR)lde $(OSARCHDIR)$(LDENAME) $(OSARCHDIR)ldeether \
	$(OSARCHDIR)testsysout $(OSARCHDIR)setsysout

$(OSARCHDIR)lde: $(SRCDIR)ldeboot.c $(SRCDIR)unixfork.c
	$(CC) $(CFLAGS) -I$(INCDIR) $(SRCDIR)ldeboot.c $(SRCDIR)unixfork.c \
		$(LDFLAGS) -o $(OSARCHDIR)lde

$(OSARCHDIR)$(LDENAME) :       $(DEVFILES) $(EXTFILES) $(OSARCHDIR)makevdate
	/bin/rm -f $(VFILE).c
	$(OSARCHDIR)makevdate > $(VFILE).c
	$(CC) -g $(CFLAGS) $(DEVFILES) $(EXTFILES) $(VFILE).c \
		$(LDFLAGS) -o $(OSARCHDIR)$(LDENAME)
	@ echo ""
	@ echo "Executable is now named '$(OSARCHDIR)$(LDENAME)'"

$(OSARCHDIR)ldeether :  $(SRCDIR)ldeether.c
	$(CC) $(CFLAGS) $(SRCDIR)ldeether.c -o $(OSARCHDIR)ldeether
	@ echo ""
	@ echo "ethernet kickstart is now named 'ldeether'"
	@ echo "Now making ldeether setuid root"
	- rsh python "(cd `pwd`;/users/maiko/bin/suid $(OSARCHDIR)ldeether)"
	ls -l $(OSARCHDIR)ldeether

$(OSARCHDIR)makevdate	: $(SRCDIR)makevdate.c
	$(CC) $(CFLAGS) $(SRCDIR)makevdate.c -o $(OSARCHDIR)makevdate

$(OSARCHDIR)testsysout : $(OBJECTDIR)testsysout.o
	$(CC) $(OBJECTDIR)testsysout.o -lc -lm -o $(OSARCHDIR)testsysout

$(OSARCHDIR)setsysout : $(OBJECTDIR)setsysout.o
	$(CC) $(OBJECTDIR)setsysout.o -lc -lm -o $(OSARCHDIR)setsysout


$(OSARCHDIR)testdisplay :  $(SRCDIR)testdisplay.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)display.h $(INCDIR)dbprint.h
	$(CC) $(CFLAGS) -DDEBUG -I$(INCDIR) $(SRCDIR)testdisplay.c -lsuntool -lsunwindow  -lpixrect -lc -lm -o $(OSARCHDIR)testdisplay

#### Component files ######################################################

$(OBJECTDIR)testsysout.o: $(SRCDIR)testsysout.c
	$(CC) -c $(SRCDIR)testsysout.c -I../inc  -o $(OBJECTDIR)testsysout$(OEXT)

$(OBJECTDIR)setsysout.o: $(SRCDIR)setsysout.c 
	$(CC) -c $(SRCDIR)setsysout.c -I../inc  -o $(OBJECTDIR)setsysout$(OEXT)

$(OBJECTDIR)main.o : $(SRCDIR)main.c $(INCDIR)lispemul.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)address.h $(INCDIR)lisptypes.h \
	 $(INCDIR)address68k.h  $(INCDIR)stack.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lispmap.h  $(INCDIR)ifpage.h  $(INCDIR)iopage.h \
	 $(INCDIR)return.h $(INCDIR)debug.h $(INCDIR)profile.h
	$(CC) $(RFLAGS) $(SRCDIR)main.c $(INLINE) -o $(OBJECTDIR)main$(OEXT)

$(OBJECTDIR)debugtools.o :  $(SRCDIR)debugtools.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)cell.h  $(INCDIR)stack.h
	$(CC) $(RFLAGS) $(SRCDIR)debugtools.c $(INLINE) -o $(OBJECTDIR)debugtools$(OEXT)

$(OBJECTDIR)Kprint.o :  $(SRCDIR)Kprint.c $(INCDIR)print.h  \
	 $(INCDIR)address.h  $(INCDIR)lispemul.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispglobal.h  $(INCDIR)initatoms.h \
	 $(INCDIR)cell.h  $(INCDIR)emulglobal.h  $(INCDIR)lispmap.h \
	 $(INCDIR)address68k.h
	$(CC) $(RFLAGS) $(SRCDIR)Kprint.c $(INLINE) -o $(OBJECTDIR)Kprint$(OEXT)

$(OBJECTDIR)testtool.o :  $(SRCDIR)testtool.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)cell.h  $(INCDIR)stack.h  $(INCDIR)ifpage.h
	$(CC) $(RFLAGS) $(SRCDIR)testtool.c $(INLINE) -o $(OBJECTDIR)testtool$(OEXT)

$(OBJECTDIR)allocmds.o :  $(SRCDIR)allocmds.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)cell.h  $(INCDIR)lispmap.h \
	 $(INCDIR)initatoms.h  $(INCDIR)systematoms.h  $(INCDIR)lispglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)allocmds.c $(INLINE) -o $(OBJECTDIR)allocmds$(OEXT)

$(OBJECTDIR)arith2.o :  $(SRCDIR)arith2.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h $(INLINE)
	$(CC) $(DISPRFLAGS) $(SRCDIR)arith2.c $(INLINE) -o $(OBJECTDIR)arith2$(OEXT)

$(OBJECTDIR)arith3.o :  $(SRCDIR)arith3.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h  $(INLINE) \
	 $(INCDIR)lispglobal.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)arith.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)arith3.c $(INLINE) -o $(OBJECTDIR)arith3$(OEXT)

$(OBJECTDIR)arith4.o :  $(SRCDIR)arith4.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h $(INLINE) \
	 $(INCDIR)lispglobal.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)arith.h $(INCDIR)medleyfp.h
	$(CC) $(DISPRFLAGS) $(SRCDIR)arith4.c $(INLINE) -o $(OBJECTDIR)arith4$(OEXT)

$(OBJECTDIR)array.o :  $(SRCDIR)array.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array.c $(INLINE) -o $(OBJECTDIR)array$(OEXT)

$(OBJECTDIR)array3.o :  $(SRCDIR)array3.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array3.c $(INLINE) -o $(OBJECTDIR)array3$(OEXT)

$(OBJECTDIR)array5.o :  $(SRCDIR)array5.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array5.c $(INLINE) -o $(OBJECTDIR)array5$(OEXT)

$(OBJECTDIR)atom.o :  $(SRCDIR)atom.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)atom.c $(INLINE) -o $(OBJECTDIR)atom$(OEXT)

$(OBJECTDIR)bin.o :  $(SRCDIR)bin.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)stream.h
	$(CC) $(RFLAGS) $(SRCDIR)bin.c $(INLINE) -o $(OBJECTDIR)bin$(OEXT)

$(OBJECTDIR)binds.o :  $(SRCDIR)binds.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)binds.c $(INLINE) -o $(OBJECTDIR)binds$(OEXT)

$(OBJECTDIR)bitblt.o :  $(SRCDIR)bitblt.c $(INCDIR)lispemul.h \
	  $(INCDIR)lispglobal.h  $(INCDIR)lispmap.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)address68k.h  $(INCDIR)address.h \
	 $(INCDIR)pilotbbt.h  $(INCDIR)display.h  $(INCDIR)bitblt.h \
	 $(INCDIR)bb.h
	$(CC) $(RFLAGS) $(SRCDIR)bitblt.c $(INLINE) -o $(OBJECTDIR)bitblt$(OEXT)

$(OBJECTDIR)bitblt68K.o :  $(OBJECTDIR)bitblt68K.i $(SRCDIR)bitblt68K.s
	as -O $(OBJECTDIR)bitblt68K.i -o $(OBJECTDIR)bitblt68K$(OEXT)

$(OBJECTDIR)bitblt68K.i : $(SRCDIR)bitblt68K.s
	/lib/cpp $(SRCDIR)bitblt68K.s $(OBJECTDIR)bitblt68K.i

$(OBJECTDIR)bitbltSPARC.o :  $(SRCDIR)bitbltSPARC.s
	as -P $(SRCDIR)bitbltSPARC.s -o $(OBJECTDIR)bitbltSPARC$(OEXT)

$(OBJECTDIR)bitblt386i.o :  $(SRCDIR)bitblt386i.s $(OBJECTDIR)bitblt386i.i
	as $(OBJECTDIR)bitblt386i.i -o $(OBJECTDIR)bitblt386i$(OEXT)

$(OBJECTDIR)bitblt386i.i : $(SRCDIR)bitblt386i.s
	/lib/cpp $(SRCDIR)bitblt386i.s $(OBJECTDIR)bitblt386i.i

$(OBJECTDIR)bitbltsub.o :  $(SRCDIR)bitbltsub.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)address68k.h  $(INCDIR)address.h \
	 $(INCDIR)pilotbbt.h  $(INCDIR)display.h $(INCDIR)displaydata.h \
	 $(INCDIR)bitblt.h $(INCDIR)bb.h $(INCDIR)dbprint.h \
	 $(INCDIR)stack.h $(INCDIR)cell.h $(INCDIR)gcdata.h $(INCDIR)arith.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)bitbltsub.c $(INLINE) -o $(OBJECTDIR)bitbltsub$(OEXT)

$(OBJECTDIR)blt.o :  $(SRCDIR)blt.c $(INCDIR)lispemul.h  $(INCDIR)address.h  \
	 $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)stack.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h  $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)blt.c $(INLINE) -o $(OBJECTDIR)blt$(OEXT)

$(OBJECTDIR)byteswapfns.o: $(SRCDIR)byteswapfns.c $(INLINE)
	$(CC) $(RFLAGS) $(SRCDIR)byteswapfns.c $(INLINE) -o $(OBJECTDIR)byteswapfns$(OEXT)

$(OBJECTDIR)car-cdr.o :  $(SRCDIR)car-cdr.c $(INCDIR)lispemul.h  \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)gcdata.h  $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)car-cdr.c $(INLINE) -o $(OBJECTDIR)car-cdr$(OEXT)

$(OBJECTDIR)chardevice.o :  $(SRCDIR)chardevice.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)lispglobal.h $(INCDIR)stream.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)osmessage.h  $(INCDIR)arith.h $(INCDIR)localfile.h
	$(CC) $(RFLAGS) $(SRCDIR)chardevice.c $(INLINE) -o $(OBJECTDIR)chardevice$(OEXT)

$(OBJECTDIR)colorbltfns.o :  $(SRCDIR)colorbltfns.c $(INCDIR)lispemul.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)lispmap.h $(INCDIR)lisptypes.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)address68k.h  $(INCDIR)address.h \
	 $(INCDIR)pilotbbt.h  $(INCDIR)display.h  $(INCDIR)bitblt.h \
	 $(INCDIR)arith.h $(INCDIR)displaydata.h $(INCDIR)debug.h \
	 $(INCDIR)stream.h
	$(CC) $(RFLAGS) $(SRCDIR)colorbltfns.c $(INLINE) -o $(OBJECTDIR)colorbltfns$(OEXT)

$(OBJECTDIR)llcolor.o : $(SRCDIR)llcolor.c $(INCDIR)lispemul.h $(INCDIR)lispmap.h \
	$(INCDIR)lisptypes.h $(INCDIR)address.h $(INCDIR)address68k.h \
	$(INCDIR)lispglobal.h $(INCDIR)emulglobal.h $(INCDIR)display.h \
	$(INCDIR)devconfig.h $(INCDIR)bb.h $(INCDIR)bitblt.h $(INCDIR)pilotbbt.h \
	$(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)llcolor.c $(INLINE) -o $(OBJECTDIR)llcolor$(OEXT)

$(OBJECTDIR)lineblt8.o :  $(SRCDIR)lineblt8.c $(INCDIR)lispemul.h 
	$(CC) $(RFLAGS) $(SRCDIR)lineblt8.c $(INLINE) -o $(OBJECTDIR)lineblt8$(OEXT)

$(OBJECTDIR)common.o :  $(SRCDIR)common.c $(INCDIR)lispemul.h \
	 $(INCDIR)lispmap.h $(INCDIR)address68k.h $(INCDIR)lispglobal.h \
	 $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)common.c $(INLINE) -o $(OBJECTDIR)common$(OEXT)

$(OBJECTDIR)conspage.o :  $(SRCDIR)conspage.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)cell.h  $(INCDIR)lispmap.h \
	 $(INCDIR)gcdata.h  $(INCDIR)lispglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)conspage.c $(INLINE) -o $(OBJECTDIR)conspage$(OEXT)

$(OBJECTDIR)createcell.o :  $(SRCDIR)createcell.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)gcdata.h
	$(CC) $(RFLAGS) $(SRCDIR)createcell.c $(INLINE) -o $(OBJECTDIR)createcell$(OEXT)

$(OBJECTDIR)draw.o :  $(SRCDIR)draw.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)draw.c $(INLINE) -o $(OBJECTDIR)draw$(OEXT)

$(OBJECTDIR)z2.o :  $(SRCDIR)z2.c  \
	 $(INCDIR)lispemul.h  $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)stack.h \
	 $(INCDIR)gcdata.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)z2.c $(INLINE) -o $(OBJECTDIR)z2$(OEXT)

$(OBJECTDIR)eqf.o :  $(SRCDIR)eqf.c  $(INCDIR)medleyfp.h \
	 $(INCDIR)lispemul.h  $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)eqf.c $(INLINE) -o $(OBJECTDIR)eqf$(OEXT)

$(OBJECTDIR)fp.o :  $(SRCDIR)fp.c  \
	 $(INCDIR)lispemul.h  $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h   \
	 $(INCDIR)my.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)fp.c $(INLINE) -o $(OBJECTDIR)fp$(OEXT)

$(OBJECTDIR)intcall.o :  $(SRCDIR)intcall.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h $(INCDIR)address68k.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)lispmap.h $(INCDIR)stack.h $(INCDIR)return.h \
	 $(INCDIR)emulglobal.h $(INCDIR)lispglobal.h $(INCDIR)initatoms.h \
	 $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)intcall.c $(INLINE) -o $(OBJECTDIR)intcall$(OEXT)

$(OBJECTDIR)ubf1.o :  $(SRCDIR)ubf1.c $(INCDIR)medleyfp.h \
	 $(INCDIR)lispemul.h  $(INCDIR)address68k.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h $(INCDIR)lispmap.h $(INCDIR)arith.h $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)ubf1.c $(INLINE) -o $(OBJECTDIR)ubf1$(OEXT)

$(OBJECTDIR)ubf2.o :  $(SRCDIR)ubf2.c  \
	 $(INCDIR)lispemul.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)ubf2.c $(INLINE) -o $(OBJECTDIR)ubf2$(OEXT)

$(OBJECTDIR)ubf3.o :  $(SRCDIR)ubf3.c  \
	 $(INCDIR)lispemul.h  $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)ubf3.c $(INLINE) -o $(OBJECTDIR)ubf3$(OEXT)

$(OBJECTDIR)unix-utils.o :  $(SRCDIR)unix-utils.c  \
	 $(INCDIR)lisptypes.h $(INCDIR)keyboard.h
	$(CC) $(RFLAGS) $(SRCDIR)unix-utils.c $(INLINE) -o $(OBJECTDIR)unix-utils$(OEXT)

$(OBJECTDIR)dspsubrs.o :  $(SRCDIR)dspsubrs.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)display.h $(INCDIR)lisptypes.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)dspsubrs.c $(INLINE) -o $(OBJECTDIR)dspsubrs$(OEXT)

$(OBJECTDIR)ether.o :  $(SRCDIR)ether.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)ether.h
	$(CC) $(RFLAGS) $(SRCDIR)ether.c $(INLINE) -o $(OBJECTDIR)ether$(OEXT)

$(OBJECTDIR)findkey.o :  $(SRCDIR)findkey.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)stack.h  $(INCDIR)lispglobal.h  $(INCDIR)address68k.h
	$(CC) $(RFLAGS) $(SRCDIR)findkey.c $(INLINE) -o $(OBJECTDIR)findkey$(OEXT)

$(OBJECTDIR)dsk.o :  $(SRCDIR)dsk.c $(INCDIR)lispemul.h  $(INCDIR)lispmap.h \
	 $(INCDIR)address68k.h $(INCDIR)lisptypes.h $(INCDIR)lispglobal.h \
	 $(INCDIR)medleyfp.h $(INCDIR)arith.h  $(INCDIR)stream.h  $(INCDIR)timeout.h \
	 $(INCDIR)localfile.h $(INCDIR)osmessage.h $(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)dsk.c $(INLINE) -o $(OBJECTDIR)dsk$(OEXT)

$(OBJECTDIR)ufs.o :  $(SRCDIR)ufs.c $(INCDIR)lispemul.h  $(INCDIR)lispmap.h  \
	 $(INCDIR)address68k.h $(INCDIR)dbprint.h  $(INLINE)\
	 $(INCDIR)lisptypes.h  $(INCDIR)lispglobal.h $(INCDIR)arith.h \
	 $(INCDIR)stream.h $(INCDIR)timeout.h $(INCDIR)localfile.h $(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)ufs.c $(INLINE) -o $(OBJECTDIR)ufs$(OEXT)

$(OBJECTDIR)directory.o :  $(SRCDIR)directory.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h $(INCDIR)address68k.h $(INCDIR)lisptypes.h  \
	 $(INCDIR)arith.h $(INCDIR)lispglobal.h $(INCDIR)timeout.h $(INCDIR)localfile.h	
	$(CC) $(RFLAGS) $(SRCDIR)directory.c $(INLINE) -o $(OBJECTDIR)directory$(OEXT)

$(OBJECTDIR)fvar.o :  $(SRCDIR)fvar.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)stack.h  $(INCDIR)emulglobal.h  $(INCDIR)lispmap.h \
	 $(INCDIR)gcdata.h $(INCDIR)lisptypes.h
	$(CC) $(DISPRFLAGS) $(SRCDIR)fvar.c $(INLINE) -o $(OBJECTDIR)fvar$(OEXT)

$(OBJECTDIR)gc.o :  $(SRCDIR)gc.c $(INCDIR)lispemul.h  $(INCDIR)gcdata.h  \
	 $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)gc.c $(INLINE) -o $(OBJECTDIR)gc$(OEXT)

$(OBJECTDIR)gc2.o :  $(SRCDIR)gc2.c $(INCDIR)lispemul.h  $(INCDIR)lispmap.h  \
	 $(INCDIR)lisptypes.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h
	$(CC) $(RFLAGS) $(SRCDIR)gc2.c $(INLINE) -o $(OBJECTDIR)gc2$(OEXT)

$(OBJECTDIR)gcarrayops.o :  $(SRCDIR)gcarrayops.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)stack.h \
	 $(INCDIR)cell.h  $(INCDIR)ifpage.h  $(INCDIR)gcdata.h \
	 $(INCDIR)array.h
	$(CC) $(RFLAGS) $(SRCDIR)gcarrayops.c $(INLINE) -o $(OBJECTDIR)gcarrayops$(OEXT)

$(OBJECTDIR)gcfinal.o :  $(SRCDIR)gcfinal.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)stack.h \
	 $(INCDIR)cell.h  $(INCDIR)ifpage.h  $(INCDIR)gcdata.h \
	 $(INCDIR)array.h
	$(CC) $(RFLAGS) $(SRCDIR)gcfinal.c $(INLINE) -o $(OBJECTDIR)gcfinal$(OEXT)

$(OBJECTDIR)gchoverflow.o :  $(SRCDIR)gchoverflow.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)gcdata.h
	$(CC) $(RFLAGS) $(SRCDIR)gchoverflow.c $(INLINE) -o $(OBJECTDIR)gchoverflow$(OEXT)

$(OBJECTDIR)gchtfind.o :  $(SRCDIR)gchtfind.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)gcdata.h \
	 $(INCDIR)lispmap.h  $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)gchtfind.c $(INLINE) -o $(OBJECTDIR)gchtfind$(OEXT)

$(OBJECTDIR)gcmain3.o :  $(SRCDIR)gcmain3.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)stack.h  $(INCDIR)cell.h  $(INCDIR)ifpage.h \
	 $(INCDIR)gcdata.h
	$(CC) $(RFLAGS) $(SRCDIR)gcmain3.c $(INLINE) -o $(OBJECTDIR)gcmain3$(OEXT)

$(OBJECTDIR)gcreclaim.o :  $(SRCDIR)gcreclaim.c $(INCDIR)lispemul.h  \
	 $(INCDIR)emulglobal.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)address.h  $(INCDIR)address68k.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)stack.h  $(INCDIR)gcdata.h
	$(CC) $(RFLAGS) $(SRCDIR)gcreclaim.c $(INLINE) -o $(OBJECTDIR)gcreclaim$(OEXT)

$(OBJECTDIR)gcreccell.o :  $(SRCDIR)gcreccell.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h $(INCDIR)dbprint.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)stack.h \
	 $(INCDIR)cell.h  $(INCDIR)ifpage.h  $(INCDIR)gcdata.h
	$(CC) $(RFLAGS) $(SRCDIR)gcreccell.c $(INLINE) -o $(OBJECTDIR)gcreccell$(OEXT)

$(OBJECTDIR)gccode.o :  $(SRCDIR)gccode.c \
	 $(INCDIR)lispemul.h  $(INCDIR)lisptypes.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)lispmap.h \
	 $(INCDIR)stack.h  $(INCDIR)cell.h  $(INCDIR)ifpage.h \
	 $(INCDIR)gcdata.h  $(INCDIR)array.h
	$(CC) $(RFLAGS) $(SRCDIR)gccode.c $(INLINE) -o $(OBJECTDIR)gccode$(OEXT)

$(OBJECTDIR)gcscan.o :  $(SRCDIR)gcscan.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)gcdata.h $(INCDIR)lisptypes.h
	$(CC) $(RFLAGS) $(SRCDIR)gcscan.c $(INLINE) -o $(OBJECTDIR)gcscan$(OEXT)

$(OBJECTDIR)gvar2.o :  $(SRCDIR)gvar2.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)gcdata.h  $(INCDIR)emulglobal.h $(INCDIR)cell.h $(INCDIR)lisptypes.h
	$(CC) $(RFLAGS) $(SRCDIR)gvar2.c $(INLINE) -o $(OBJECTDIR)gvar2$(OEXT)

$(OBJECTDIR)hardreturn.o :  $(SRCDIR)hardreturn.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)cell.h $(INCDIR)stack.h  $(INCDIR)return.h \
	 $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)hardreturn.c $(INLINE) -o $(OBJECTDIR)hardreturn$(OEXT)

$(OBJECTDIR)inet.o : $(SRCDIR)inet.c $(INCDIR)lispemul.h $(INCDIR)arith.h \
	 $(INCDIR)lispmap.h $(INCDIR)lisptypes.h $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h $(INCDIR)address68k.h $(INCDIR)ether.h \
	 $(INCDIR)dbprint.h $(INCDIR)localfile.h
	$(CC) $(RFLAGS) $(SRCDIR)inet.c $(INLINE) -o $(OBJECTDIR)inet$(OEXT)

$(OBJECTDIR)initdisplay.o :  $(SRCDIR)initdisplay.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)address.h $(INCDIR)lisptypes.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)display.h $(INCDIR)dbprint.h $(INLINE)
	$(CC) $(RFLAGS) $(SRCDIR)initdisplay.c $(INLINE) -o $(OBJECTDIR)initdisplay$(OEXT)

$(OBJECTDIR)initkbd.o :  $(SRCDIR)initkbd.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)address68k.h  $(INCDIR)address.h  $(INCDIR)iopage.h \
	 $(INCDIR)ifpage.h
	$(CC) $(RFLAGS) $(SRCDIR)initkbd.c $(INLINE) -o $(OBJECTDIR)initkbd$(OEXT)

$(OBJECTDIR)initsysout.o :  $(SRCDIR)initsysout.c $(INCDIR)hdw_config.h  \
	 $(INCDIR)lispemul.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)address68k.h \
	 $(INCDIR)ifpage.h  $(INCDIR)iopage.h  $(INCDIR)cell.h \
	 $(INCDIR)systematoms.h
	$(CC) $(RFLAGS) $(SRCDIR)initsysout.c $(INLINE) -o $(OBJECTDIR)initsysout$(OEXT)

$(OBJECTDIR)kbdsubrs.o :  $(SRCDIR)kbdsubrs.c $(INCDIR)lispemul.h
	$(CC) $(RFLAGS) $(SRCDIR)kbdsubrs.c $(INLINE) -o $(OBJECTDIR)kbdsubrs$(OEXT)

$(OBJECTDIR)keyevent.o :  $(SRCDIR)keyevent.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)address.h  $(INCDIR)stack.h  $(INCDIR)iopage.h \
	 $(INCDIR)ifpage.h $(INCDIR)keyboard.h $(INCDIR)display.h \
	 $(INCDIR)pilotbbt.h
	$(CC) $(RFLAGS) $(SRCDIR)keyevent.c $(INLINE) -o $(OBJECTDIR)keyevent$(OEXT)

$(OBJECTDIR)keylib.o :  $(SRCDIR)keylib.c
	$(CC) $(RFLAGS) $(SRCDIR)keylib.c $(INLINE) -o $(OBJECTDIR)keylib$(OEXT)

$(OBJECTDIR)keytester.o :  $(SRCDIR)keytester.c
	$(CC) $(RFLAGS) $(SRCDIR)keytester.c $(INLINE) -o $(OBJECTDIR)keytester$(OEXT)

$(OBJECTDIR)keytestno.o :  $(SRCDIR)keytestno.c
	$(CC) $(RFLAGS) $(SRCDIR)keytestno.c $(INLINE) -o $(OBJECTDIR)keytestno$(OEXT)

$(OBJECTDIR)listhandle.o :  $(SRCDIR)listhandle.c $(INCDIR)lispemul.h  \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)listhandle.c $(INLINE) -o $(OBJECTDIR)listhandle$(OEXT)

$(OBJECTDIR)llstk.o :  $(SRCDIR)llstk.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)address68k.h \
	 $(INCDIR)address.h  $(INCDIR)lisptypes.h  $(INCDIR)initatoms.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h  $(INCDIR)cell.h \
	 $(INCDIR)stack.h
	$(CC) $(RFLAGS) $(SRCDIR)llstk.c $(INLINE) -o $(OBJECTDIR)llstk$(OEXT)

#$(OBJECTDIR)loader.o :  $(SRCDIR)loader.c
#	$(CC) $(RFLAGS) $(SRCDIR)loader.c $(INLINE) -o $(OBJECTDIR)loader$(OEXT)

$(OBJECTDIR)loadsysout.o :  $(SRCDIR)loadsysout.c $(INCDIR)address68k.h \
	 $(INCDIR)lispemul.h $(INCDIR)lispmap.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)ifpage.h $(INCDIR)dbprint.h $(INCDIR)lisptypes.h $(INLINE)
	$(CC) $(RFLAGS) $(SRCDIR)loadsysout.c $(INLINE) -o $(OBJECTDIR)loadsysout$(OEXT)

$(OBJECTDIR)loopsops.o : $(SRCDIR)loopsops.c $(INCDIR)lispemul.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)address.h $(INCDIR)lisptypes.h \
	 $(INCDIR)address68k.h  $(INCDIR)cell.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lispmap.h  $(INCDIR)ifpage.h  $(INCDIR)iopage.h \
	 $(INCDIR)debug.h $(INCDIR)profile.h
	$(CC) $(RFLAGS) $(SRCDIR)loopsops.c $(INLINE) -o $(OBJECTDIR)loopsops$(OEXT)

$(OBJECTDIR)lowlevel1.o :  $(SRCDIR)lowlevel1.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h $(INCDIR)lisptypes.h
	$(CC) $(RFLAGS) $(SRCDIR)lowlevel1.c $(INLINE) -o $(OBJECTDIR)lowlevel1$(OEXT)

$(OBJECTDIR)lowlevel2.o :  $(SRCDIR)lowlevel2.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)lowlevel2.c $(INLINE) -o $(OBJECTDIR)lowlevel2$(OEXT)

$(OBJECTDIR)misc7.o :  $(SRCDIR)misc7.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)stack.h $(INCDIR)opcodes.h $(INCDIR)display.h
	$(CC) $(RFLAGS) $(SRCDIR)misc7.c $(INLINE) -o $(OBJECTDIR)misc7$(OEXT)

$(OBJECTDIR)mvs.o :  $(SRCDIR)mvs.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)stack.h $(INCDIR)opcodes.h
	$(CC) $(RFLAGS) $(SRCDIR)mvs.c $(INLINE) -o $(OBJECTDIR)mvs$(OEXT)

$(OBJECTDIR)newmakeatom.o :  $(SRCDIR)newmakeatom.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address68k.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)lispmap.h  $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)newmakeatom.c $(INLINE) -o $(OBJECTDIR)newmakeatom$(OEXT)

$(OBJECTDIR)osmessage.o :  $(SRCDIR)osmessage.c $(INCDIR)lispemul.h \
	 $(INCDIR)address68k.h  $(INCDIR)stream.h  $(INCDIR)arith.h \
	 $(INCDIR)lispmap.h $(INCDIR)lisptypes.h
	$(CC) $(RFLAGS) $(SRCDIR)osmessage.c $(INLINE) -o $(OBJECTDIR)osmessage$(OEXT)

$(OBJECTDIR)return.o :  $(SRCDIR)return.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)stack.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h  $(INCDIR)initatoms.h \
	 $(INCDIR)return.h $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)return.c $(INLINE) -o $(OBJECTDIR)return$(OEXT)

$(OBJECTDIR)rplcons.o :  $(SRCDIR)rplcons.c $(INCDIR)lispemul.h  \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)gcdata.h  $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)rplcons.c $(INLINE) -o $(OBJECTDIR)rplcons$(OEXT)

$(OBJECTDIR)rs232c.o :  $(SRCDIR)rs232c.c $(INCDIR)rs232c.h
	$(CC) $(RFLAGS) $(SRCDIR)rs232c.c $(INLINE) -o $(OBJECTDIR)rs232c$(OEXT)

$(OBJECTDIR)shift.o :  $(SRCDIR)shift.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)arith.h $(INCDIR)medleyfp.h
	$(CC) $(RFLAGS) $(SRCDIR)shift.c $(INLINE) -o $(OBJECTDIR)shift$(OEXT)

$(OBJECTDIR)storage.o :  $(SRCDIR)storage.c $(INCDIR)hdw_config.h  \
	 $(INCDIR)lispemul.h  $(INCDIR)address.h \
	 $(INCDIR)address68k.h  $(INCDIR)lispmap.h  $(INCDIR)stack.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)cell.h  $(INCDIR)lisptypes.h \
	 $(INCDIR)ifpage.h
	$(CC) $(RFLAGS) $(SRCDIR)storage.c $(INLINE) -o $(OBJECTDIR)storage$(OEXT)

$(OBJECTDIR)subr.o :  $(SRCDIR)subr.c \
	 $(INCDIR)lispemul.h  $(INCDIR)address.h  \
	 $(INCDIR)address68k.h $(INCDIR)subrs.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)cell.h  $(INCDIR)stack.h \
	 $(INCDIR)arith.h $(INCDIR)profile.h
	$(CC) $(RFLAGS) $(SRCDIR)subr.c $(INLINE) -o $(OBJECTDIR)subr$(OEXT)

$(OBJECTDIR)miscn.o : $(SRCDIR)miscn.c \
	 $(INCDIR)lispemul.h  $(INCDIR)address.h  \
	 $(INCDIR)address68k.h $(INCDIR)subrs.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h   \
	 $(INCDIR)arith.h $(INCDIR)profile.h
	$(CC) $(RFLAGS) $(SRCDIR)miscn.c $(INLINE) -o $(OBJECTDIR)miscn$(OEXT)


$(OBJECTDIR)subr0374.o :  $(SRCDIR)subr0374.c $(INCDIR)lispemul.h  $(INCDIR)address68k.h  $(INCDIR)lispglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)subr0374.c $(INLINE) -o $(OBJECTDIR)subr0374$(OEXT)

$(OBJECTDIR)syscallmsg.o :  $(SRCDIR)syscallmsg.c
	$(CC) $(RFLAGS) $(SRCDIR)syscallmsg.c $(INLINE) -o $(OBJECTDIR)syscallmsg$(OEXT)

$(OBJECTDIR)timer.o :  $(SRCDIR)timer.c $(INCDIR)lispemul.h  \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)address68k.h $(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)timer.c $(INLINE) -o $(OBJECTDIR)timer$(OEXT)

$(OBJECTDIR)tty.o :  $(SRCDIR)tty.c $(INCDIR)tty.h
	$(CC) $(RFLAGS) $(SRCDIR)tty.c $(INLINE) -o $(OBJECTDIR)tty$(OEXT)

$(OBJECTDIR)typeof.o :  $(SRCDIR)typeof.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lisptypes.h  $(INCDIR)cell.h \
	 $(INCDIR)lispmap.h
	$(CC) $(RFLAGS) $(SRCDIR)typeof.c $(INLINE) -o $(OBJECTDIR)typeof$(OEXT)

$(OBJECTDIR)ufn.o :  $(SRCDIR)ufn.c $(INCDIR)lispemul.h  $(INCDIR)address.h  \
	 $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)stack.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h  $(INCDIR)initatoms.h \
	 $(INCDIR)cell.h
	$(CC) $(RFLAGS) $(SRCDIR)ufn.c $(INLINE) -o $(OBJECTDIR)ufn$(OEXT)

$(OBJECTDIR)unixcomm.o :  $(SRCDIR)unixcomm.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)cell.h  $(INCDIR)stack.h \
	 $(INCDIR)arith.h
	$(CC) $(RFLAGS) $(SRCDIR)unixcomm.c $(INLINE) -o $(OBJECTDIR)unixcomm$(OEXT)

$(OBJECTDIR)uraid.o :  $(SRCDIR)uraid.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)cell.h  $(INCDIR)stack.h \
	 $(INCDIR)debug.h
	$(CC) $(RFLAGS) $(SRCDIR)uraid.c $(INLINE) -o $(OBJECTDIR)uraid$(OEXT)

$(OBJECTDIR)rpc.o :  $(SRCDIR)rpc.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)lispglobal.h  $(INCDIR)cell.h  $(INCDIR)stack.h \
	 $(INCDIR)arith.h $(INCDIR)localfile.h
	$(CC) $(RFLAGS) $(SRCDIR)rpc.c $(INLINE) -o $(OBJECTDIR)rpc$(OEXT)

$(OBJECTDIR)unwind.o :  $(SRCDIR)unwind.c $(INCDIR)lispemul.h  \
	 $(INCDIR)address.h  $(INCDIR)address68k.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)lispmap.h  $(INCDIR)stack.h \
	 $(INCDIR)emulglobal.h  $(INCDIR)lispglobal.h
	$(CC) $(RFLAGS) $(SRCDIR)unwind.c $(INLINE) -o $(OBJECTDIR)unwind$(OEXT)

$(OBJECTDIR)vars3.o :  $(SRCDIR)vars3.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)lispmap.h \
	 $(INCDIR)address68k.h  $(INCDIR)emulglobal.h  $(INCDIR)cell.h \
	 $(INCDIR)lisptypes.h  $(INCDIR)stack.h
	$(CC) $(RFLAGS) $(SRCDIR)vars3.c $(INLINE) -o $(OBJECTDIR)vars3$(OEXT)

$(OBJECTDIR)vmemsave.o :  $(SRCDIR)vmemsave.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispmap.h  $(INCDIR)lispglobal.h \
	 $(INCDIR)ifpage.h  $(INCDIR)vmemsave.h
	$(CC) $(RFLAGS) $(SRCDIR)vmemsave.c $(INLINE) -o $(OBJECTDIR)vmemsave$(OEXT)

$(OBJECTDIR)array2.o : $(SRCDIR)array2.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array2.c $(INLINE) -o $(OBJECTDIR)array2$(OEXT)

$(OBJECTDIR)array4.o : $(SRCDIR)array4.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array4.c $(INLINE) -o $(OBJECTDIR)array4$(OEXT)

$(OBJECTDIR)array6.o : $(SRCDIR)array6.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h  $(INCDIR)my.h
	$(CC) $(RFLAGS) $(SRCDIR)array6.c $(INLINE) -o $(OBJECTDIR)array6$(OEXT)

$(OBJECTDIR)sxhash.o : $(SRCDIR)sxhash.c $(INCDIR)lispemul.h  \
	 $(INCDIR)lispglobal.h  $(INCDIR)address68k.h \
	 $(INCDIR)lispmap.h  $(INCDIR)lisptypes.h  $(INCDIR)emulglobal.h \
	 $(INCDIR)arith.h 
	$(CC) $(RFLAGS) $(SRCDIR)sxhash.c $(INLINE) -o $(OBJECTDIR)sxhash$(OEXT)

$(OBJECTDIR)usersubrs.o : $(SRCDIR)usersubrs.c
	$(CC) $(RFLAGS) $(SRCDIR)usersubrs.c $(INLINE) -o $(OBJECTDIR)usersubrs$(OEXT)

$(OBJECTDIR)XClose.o : $(SRCDIR)XClose.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h 
	$(CC) $(RFLAGS) $(SRCDIR)XClose.c -o $(OBJECTDIR)XClose$(OEXT)

$(OBJECTDIR)Cursor.o : $(SRCDIR)Cursor.c $(INCDIR)XVersion.h $(INCDIR)MyWindow.h \
	$(INCDIR)lispemul.h $(INCDIR)display.h 
	$(CC) $(RFLAGS) $(SRCDIR)Cursor.c -o $(OBJECTDIR)Cursor$(OEXT)

$(OBJECTDIR)XWindow.o : $(SRCDIR)XWindow.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)lispemul.h $(INCDIR)address.h \
	$(INCDIR)address68k.h 
	$(CC) $(RFLAGS) $(SRCDIR)XWindow.c -o $(OBJECTDIR)XWindow$(OEXT)

$(OBJECTDIR)DoRing.o : $(SRCDIR)DoRing.c $(INCDIR)lispemul.h
	$(CC) $(RFLAGS) $(SRCDIR)DoRing.c -o $(OBJECTDIR)DoRing$(OEXT)

$(OBJECTDIR)DoScroll.o : $(SRCDIR)DoScroll.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)Xbitblt.h
	$(CC) $(RFLAGS) $(SRCDIR)DoScroll.c -o $(OBJECTDIR)DoScroll$(OEXT)

$(OBJECTDIR)XEvent.o : $(SRCDIR)XEvent.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)Xbitblt.h
	$(CC) $(RFLAGS) $(SRCDIR)XEvent.c -o $(OBJECTDIR)XEvent$(OEXT)

$(OBJECTDIR)XGravity.o : $(SRCDIR)XGravity.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)XGravity.c -o $(OBJECTDIR)XGravity$(OEXT)

$(OBJECTDIR)XInit.o : $(SRCDIR)XInit.c
	$(CC) $(RFLAGS) $(SRCDIR)XInit.c -o $(OBJECTDIR)XInit$(OEXT)

$(OBJECTDIR)InitXevent.o : $(SRCDIR)InitXevent.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)InitXevent.c -o $(OBJECTDIR)InitXevent$(OEXT)

$(OBJECTDIR)XKbdMouse.o : $(SRCDIR)XKbdMouse.c $(INCDIR)lispemul.h \
	$(INCDIR)XVersion.h $(INCDIR)MyWindow.h $(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)XKbdMouse.c -o $(OBJECTDIR)XKbdMouse$(OEXT)

$(OBJECTDIR)LispWindow.o : $(SRCDIR)LispWindow.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)Xdefaults.h
	$(CC) $(RFLAGS) $(SRCDIR)LispWindow.c -o $(OBJECTDIR)LispWindow$(OEXT)

$(OBJECTDIR)LispXbitblt.o : $(SRCDIR)LispXbitblt.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)LispXbitblt.c -o $(OBJECTDIR)LispXbitblt$(OEXT)

$(OBJECTDIR)LispXdisplay.o : $(SRCDIR)LispXdisplay.c $(INCDIR)lispemul.h \
	$(INCDIR)address.h $(INCDIR)address68k.h $(INCDIR)pilotbbt.h \
	$(INCDIR)XVersion.h $(INCDIR)MyWindow.h $(INCDIR)Xbitblt.h
	$(CC) $(RFLAGS) $(SRCDIR)LispXdisplay.c -o $(OBJECTDIR)LispXdisplay$(OEXT)

$(OBJECTDIR)XKeyboard.o : $(SRCDIR)XKeyboard.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)XKeyboard.c -o $(OBJECTDIR)XKeyboard$(OEXT)

$(OBJECTDIR)MakeXicon.o : $(SRCDIR)MakeXicon.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)Xicon.h
	$(CC) $(RFLAGS) $(SRCDIR)MakeXicon.c -o $(OBJECTDIR)MakeXicon$(OEXT)

$(OBJECTDIR)OpenDisplay.o : $(SRCDIR)OpenDisplay.c $(INCDIR)lispemul.h \
	$(INCDIR)XVersion.h $(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)OpenDisplay.c -o $(OBJECTDIR)OpenDisplay$(OEXT)

$(OBJECTDIR)ReadXoption.o : $(SRCDIR)ReadXoption.c $(INCDIR)Xdefaults.h
	$(CC) $(RFLAGS) $(SRCDIR)ReadXoption.c -o $(OBJECTDIR)ReadXoption$(OEXT)

$(OBJECTDIR)XReconfig.o : $(SRCDIR)XReconfig.c \
	$(INCDIR)XVersion.h $(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)XReconfig.c -o $(OBJECTDIR)XReconfig$(OEXT)

$(OBJECTDIR)XScroll.o : $(SRCDIR)XScroll.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)Stipple.h $(INCDIR)XCursorDef.h \
	$(INCDIR)XCursors.h
	$(CC) $(RFLAGS) $(SRCDIR)XScroll.c -o $(OBJECTDIR)XScroll$(OEXT)

$(OBJECTDIR)Scrollbar.o : $(SRCDIR)Scrollbar.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)Scrollbar.c -o $(OBJECTDIR)Scrollbar$(OEXT)

$(OBJECTDIR)XCursor.o : $(SRCDIR)XCursor.c $(INCDIR)lispemul.h \
	$(INCDIR)iopage.h $(INCDIR)XVersion.h $(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)XCursor.c -o $(OBJECTDIR)XCursor$(OEXT)

$(OBJECTDIR)XMouse.o : $(SRCDIR)XMouse.c \
	$(INCDIR)XVersion.h $(INCDIR)MyWindow.h 
	$(CC) $(RFLAGS) $(SRCDIR)XMouse.c -o $(OBJECTDIR)XMouse$(OEXT)

$(OBJECTDIR)Subwindows.o : $(SRCDIR)Subwindows.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)Subwindows.c -o $(OBJECTDIR)Subwindows$(OEXT)

$(OBJECTDIR)VideoColor.o : $(SRCDIR)VideoColor.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h
	$(CC) $(RFLAGS) $(SRCDIR)VideoColor.c -o $(OBJECTDIR)VideoColor$(OEXT)

$(OBJECTDIR)XWindowMgr.o : $(SRCDIR)XWindowMgr.c $(INCDIR)XVersion.h \
	$(INCDIR)MyWindow.h $(INCDIR)dbprint.h
	$(CC) $(RFLAGS) $(SRCDIR)XWindowMgr.c -o $(OBJECTDIR)XWindowMgr$(OEXT)

################################################################################
# Installation targets - copyprotect is ON here
# library, sysouts, fonts on release directories not handled here.
# userfiles are separate target explicitly (can make w/o building lde)
#    $(NATDIR)nativeincludes.h $(NATDIR)disp68K.il
################################################################################

prerelease :
	mkdir $(RELDIR)
	mkdir $(INSDIR)
	mkdir $(CHKDIR)

release : $(INSDIR)$(LDENAME).o userfiles $(INSDIR)$(LDENAME) \
	$(INSDIR)ldeether $(INSDIR)lde csumfiles

userfiles : $(INSDIR)usersubrs.c $(INSDIR)makefile $(INSDIR)ldeether.c

$(INSDIR)lde: $(SRCDIR)ldeboot.c $(SRCDIR)unixfork.c
	$(CC) $(CFLAGS) -I$(INCDIR) $(SRCDIR)ldeboot.c $(SRCDIR)unixfork.c \
		$(LDFLAGS) -o $(INSDIR)lde

$(OBJECTDIR)$(LDENAME).a :              $(LIBFILES) $(OSARCHDIR)makevdate
	/bin/rm -f $(VFILE).c
	$(OSARCHDIR)makevdate > $(VFILE).c
	$(CC) -c $(VFILE).c -o $(VFILE).o
	rm -f $(LDENAME).a
	ar rcv $(OBJECTDIR)$(LDENAME).a $(LIBFILES) $(VFILE).o
	- ranlib $(OBJECTDIR)$(LDENAME).a
	rm -f $(VFILE).o

$(INSDIR)$(LDENAME).o :                 $(OBJECTDIR)$(LDENAME).a
	ld -o $(INSDIR)$(LDENAME).o -r -u _main $(OBJECTDIR)$(LDENAME).a

$(INSDIR)$(LDENAME) : $(INSDIR)$(LDENAME).o $(INSDIR)usersubrs.o
	$(CC) $(INSDIR)$(LDENAME).o $(INSDIR)usersubrs.o $(FPFLAGS) $(LDFLAGS)\
		 -o $(INSDIR)$(LDENAME)
	rm -f $(INSDIR)usersubrs.o

## ldeether from release - can't tar off with root permission.

$(INSDIR)ldeether :  $(INSDIR)ldeether.c
	$(CC) $(CFLAGS) $(INSDIR)ldeether.c -o $(INSDIR)ldeether
	- rsh python "cd `pwd`; /users/maiko/bin/suid $(INSDIR)ldeether"

$(INSDIR)makefile : $(BINDIR)usermakefile-$(OSARCHNAME)
	rm -f $(INSDIR)makefile
	- ln $(BINDIR)usermakefile-$(OSARCHNAME) $(INSDIR)makefile

$(INSDIR)usersubrs.c : $(SRCDIR)usersubrs.c
	rm -f $(INSDIR)usersubrs.c
	- ln $(SRCDIR)usersubrs.c $(INSDIR)usersubrs.c

$(INSDIR)ldeether.c : $(SRCDIR)ldeether.c
	rm -f $(INSDIR)ldeether.c
	- ln $(SRCDIR)ldeether.c $(INSDIR)ldeether.c

csumfiles : $(CHKDIR)checksum $(CHKDIR)ldechecksum $(CHKDIR)README

$(CHKDIR)README : $(BINDIR)checksum-readme
	rm -f $(CHKDIR)README
	- ln $(BINDIR)checksum-readme $(CHKDIR)README

$(CHKDIR)checksum : $(BINDIR)checksum
	rm -f $(CHKDIR)checksum
	cp -p $(BINDIR)checksum $(CHKDIR)checksum
	chmod 755 $(CHKDIR)checksum

$(CHKDIR)ldechecksum : $(BINDIR)ldechecksum
	rm -f $(CHKDIR)ldechecksum
	cp -p $(BINDIR)ldechecksum $(CHKDIR)ldechecksum
	chmod 755 $(CHKDIR)ldechecksum



################################################################################
# Obsolete
################################################################################

$(NATDIR)nativeincludes.h : $(INCDIR)nativeincludes.h
	rm -f $(NATDIR)nativeincludes.h
	ln $(INCDIR)nativeincludes.h $(NATDIR)nativeincludes.h

$(NATDIR)disp68K.il : $(SRCDIR)disp68K.il
	rm -f $(NATDIR)disp68K.il
	ln $(SRCDIR)disp68K.il $(NATDIR)disp68K.il

################################################################################
# Miscellaneous targets
#	 .c.s. should always have -O
################################################################################

cleanup :
	rm  $(LIBFILES) $(EXTFILES) $(KEYOFF)

.c.o:
	$(CC) $(RFLAGS) $*.c -o $@ $(INLINE)

.c.s:
	$(CC) -S $(CFLAGS) -I$(INCDIR) $(SRCDIR)$*.c -o $(SRCDIR)$@ $(INLINE)

$(OBJECTDIR)keymaker : ../src/keymaker.c $(OBJECTDIR)keylib.o
	$(CC) $(CFLAGS) -I$(INCDIR) ../src/keymaker.c $(OBJECTDIR)keylib.o -o $(OBJECTDIR)keymaker

cxref :
	cxref -c  $(DFLAGS) -I$(INCDIR) $(SRCDIR)*.c -o ../all.cxref
