# Options for SunOS4 and SPARC
#  @(#) makefile-sunos4.sparc Version 1.19 (5/9/90). 

#************************************************************************/
#*									*/
#*	(C) Copyright 1989-95 Venue. All Rights Reserved.		*/
#*	Manufactured in the United States of America.			*/
#*									*/
#************************************************************************/
#


CC = gcc
ANSICC = gcc

#LPFILES = $(OBJECTDIR)lpmain.o \
#		  $(OBJECTDIR)lpread.o \
#		  $(OBJECTDIR)lpsolve.o \
#		  $(OBJECTDIR)lpkit.o
#		  $(OBJECTDIR)lptran.o \
#		  $(OBJECTDIR)lpdual.o \
#		  $(OBJECTDIR)lpwrite.o

# This is to make the %$#@! Apollo cc happy
OEXT = .o
# OPTFLAGS is normally -O2.
OPTFLAGS =   -O2
DISPOPTFLAGS =   -O2
FPFLAGS =
# Now share the same ldesingle with COLOR(CG4)/MONO Suns
# If you load MAIKOCOLOR.LCOM etc., you can use color functions
#
# Removed for debug:  -DSPARCDISP -DSUN4_OS4_IL 
# Added for debug: -DFNSTKCHECK -DMYOPTRACE -DOPTRACE -DNOASM
#
DEBUGFLAGS = # -DNOASM -DSTACKCHECK -DFNSTKCHECK
MACHINEFLAGS = -DOS4 -DOS4_TYPE4BUG -DCOLOR -DSUNDISPLAY  \
	       -DNEWBITBLT -DLOGINT -DFORKCOMM
FEATUREFLAGS = # -DLPSOLVE -DXMAS

INLINEFLAGS =  # -DSPARCDISP -DSUN4_OS4_IL

DFLAGS = $(DEBUGFLAGS) \
	 $(MACHINEFLAGS) \
	 $(INLINEFLAGS) \
	-DKBINT -DFSERROR -DNEW_STORAGE   \
	-DRELEASE=350 

LDFLAGS = -L$(LIBDIR) -lsuntool -lsunwindow -lpixrect -ldld -lc -lm 
#-Dsparc?
INLINE = # $(SRCDIR)dspSPARC.il
BITBLTFILE = $(OBJECTDIR)bbtSPARC.o

BYTESWAPFILES = $(OBJECTDIR)byteswap.o

OBJECTDIR = ../$(RELEASENAME)/
COLORFILES = $(OBJECTDIR)rawcolor.o

default	: $(OBJECTDIR)lde $(OBJECTDIR)ldeether

# Special rules to create xc.c on Sun4

#run cpp to expand macros
$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \
	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \
	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \
	 $(INCDIR)arith.h $(INCDIR)stream.h \
	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \
	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   \
	 $(INCDIR)inln68k.h
	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i

#run c compiler to produce first pass assembly
$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i
	rm -f $(OBJECTDIR)xc.s1
	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1

#generate C program to remove dispatch loop, optimize
$(OBJECTDIR)dsphack.c: $(SRCDIR)dsphack.lex
	rm -f $(OBJECTDIR)dsphack.c
	lex -t $(SRCDIR)dsphack.lex > $(OBJECTDIR)dsphack.c

#uses this program to find dispatch
$(OBJECTDIR)find-dsp.c: $(SRCDIR)find-dsp.lex
	rm -f $(OBJECTDIR)find-dsp.c
	lex -t $(SRCDIR)find-dsp.lex > $(OBJECTDIR)find-dsp.c

$(OBJECTDIR)find-dsp: $(OBJECTDIR)find-dsp.c
	cc -o $(OBJECTDIR)find-dsp $(OBJECTDIR)find-dsp.c -ll

$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-dsp $(OBJECTDIR)xc.s1
	rm -f $(OBJECTDIR)dispatch-label.c
	$(OBJECTDIR)find-dsp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.c

$(OBJECTDIR)dsphack: $(OBJECTDIR)dsphack.c $(OBJECTDIR)dispatch-label.c
	cc -o $(OBJECTDIR)dsphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)dsphack.c -ll
	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)dsphack.o

$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)dsphack
	rm -f $(OBJECTDIR)xc.s2
	$(OBJECTDIR)dsphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2

$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)
	rm -f $(OBJECTDIR)xc.s3
	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3

#$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3
#	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3

############
#
#	SPECIAL xc.o  for debugging
#
############
$(OBJECTDIR)xc.o:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h \
	 $(INCDIR)address.h \
	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \
	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \
	 $(INCDIR)arith.h $(INCDIR)stream.h \
	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \
	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   
	$(CC) $(DISPRFLAGS) -UOPDISP -USPARCDISP  $(SRCDIR)xc.c -I$(INCDIR) -o $(OBJECTDIR)xc.o
