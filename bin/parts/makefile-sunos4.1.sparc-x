# Options for SunOS4, SPARC and X-Window

CLXFLAGS = -DCLX -DTCP_NODELAY

CLXFILES = $(OBJECTDIR)socket.o \
           $(OBJECTDIR)socdvr.o 

XFILES = $(OBJECTDIR)XClose.o \
	$(OBJECTDIR)Cursor.o \
	$(OBJECTDIR)XWindow.o \
	$(OBJECTDIR)DoRing.o \
	$(OBJECTDIR)DoScroll.o \
	$(OBJECTDIR)XEvent.o \
	$(OBJECTDIR)XGravity.o \
	$(OBJECTDIR)XInit.o \
	$(OBJECTDIR)Xevinit.o \
	$(OBJECTDIR)Xkbdmus.o \
	$(OBJECTDIR)Xlspwin.o \
        $(OBJECTDIR)Xbbt.o \
	$(OBJECTDIR)Xkbd.o \
	$(OBJECTDIR)Xmkicon.o \
	$(OBJECTDIR)Xopendsp.o \
	$(OBJECTDIR)Xrdopt.o \
	$(OBJECTDIR)Xreconf.o \
	$(OBJECTDIR)XScroll.o \
	$(OBJECTDIR)Xscrolb.o \
	$(OBJECTDIR)XCursor.o \
	$(OBJECTDIR)XMouse.o \
	$(OBJECTDIR)Xsubwin.o \
	$(OBJECTDIR)Xcolor.o \
	$(OBJECTDIR)Xwinman.o  \
	$(CLXFILES)

XVERSION = XV11R4
XFLAGS = -DXWINDOW -D$(XVERSION) $(CLXFLAGS)

# This is to make the %$#@! Apollo cc happy
OEXT = .o
# OPTFLAGS is normally -O2.
OPTFLAGS = -g
DISPOPTFLAGS = -g

FPFLAGS =
DFLAGS = -DFSERROR -DNEW_STORAGE -DOS4 -DSPARCDISP -DSUN4_OS4_IL -DOS4_TYPE4BUG -DOLD_CURSOR -DNEWBITBLT -DLOGINT $(XFLAGS) -DFORKCOMM -DBIGATOMS -DNOEUROKBD 
LDFLAGS = -lX11 -lpixrect -lc -lm -ldld
LDELDFLAGS = -Bstatic -lX11 -lpixrect -Bdynamic -lc -lm
# SPARC Assemble optimize check
DFLAGS:sh += optck.sh ; true

#-Dsparc?
INLINE = $(SRCDIR)dspSPARC.il
BITBLTFILE = $(OBJECTDIR)bbtSPARC.o

OBJECTDIR = ../$(RELEASENAME)/
BYTESWAPFILES = $(OBJECTDIR)byteswap.o


default:	../$(OSARCHNAME)/lde ../$(OSARCHNAME)/ldeether

# Special rules to create xc.c on Sun4

#run cpp to expand macros
$(OBJECTDIR)xc.i:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  $(INCDIR)address.h \
	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \
	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \
	 $(INCDIR)arith.h $(INCDIR)stream.h \
	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \
	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h   \
	 $(INCDIR)inln68k.h
	cc -Qproduce .i $(DFLAGS) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.i

#run c compiler to produce first pass assembly
$(OBJECTDIR)xc.s1:	$(OBJECTDIR)xc.i
	rm -f $(OBJECTDIR)xc.s1
	/lib/ccom - $(FPFLAGS) <$(OBJECTDIR)xc.i >$(OBJECTDIR)xc.s1

#generate C program to remove dispatch loop, optimize
$(OBJECTDIR)dsphack.c: $(SRCDIR)dsphack.lex
	rm -f $(OBJECTDIR)dsphack.c
	lex -t $(SRCDIR)dsphack.lex > $(OBJECTDIR)dsphack.c

#uses this program to find dispatch
$(OBJECTDIR)find-dsp.c: $(SRCDIR)find-dsp.lex
	rm -f $(OBJECTDIR)find-dsp.c
	lex -t $(SRCDIR)find-dsp.lex > $(OBJECTDIR)find-dsp.c

$(OBJECTDIR)find-dsp: $(OBJECTDIR)find-dsp.c
	cc -o $(OBJECTDIR)find-dsp $(OBJECTDIR)find-dsp.c -ll

$(OBJECTDIR)dispatch-label.c: $(OBJECTDIR)find-dsp $(OBJECTDIR)xc.s1
	rm -f $(OBJECTDIR)dispatch-label.c
	$(OBJECTDIR)find-dsp < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)dispatch-label.c

$(OBJECTDIR)dsphack: $(OBJECTDIR)dsphack.c $(OBJECTDIR)dispatch-label.c
	cc -o $(OBJECTDIR)dsphack $(OBJECTDIR)dispatch-label.c $(OBJECTDIR)dsphack.c -ll
	rm -f $(OBJECTDIR)dispatch-label.o $(OBJECTDIR)dsphack.o

$(OBJECTDIR)xc.s2:	$(OBJECTDIR)xc.s1 $(OBJECTDIR)dsphack
	rm -f $(OBJECTDIR)xc.s2
	$(OBJECTDIR)dsphack < $(OBJECTDIR)xc.s1 >$(OBJECTDIR)xc.s2

$(OBJECTDIR)xc.s3:	$(OBJECTDIR)xc.s2 $(INLINE)
	rm -f $(OBJECTDIR)xc.s3
	/usr/lib/inline -i $(INLINE) < $(OBJECTDIR)xc.s2 > $(OBJECTDIR)xc.s3

$(OBJECTDIR)xc.o: $(OBJECTDIR)xc.s3
	/bin/as -o $(OBJECTDIR)xc.o -O1 $(OBJECTDIR)xc.s3


########### debugging version of xc maker


#$(OBJECTDIR)xc.o:	$(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h  #$(INCDIR)address.h \
#	 $(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \
#	 $(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
#	 $(INCDIR)initatms.h  $(INCDIR)gc.h  \
#	 $(INCDIR)arith.h $(INCDIR)stream.h \
#	 $(INCDIR)tos1defs.h  $(INCDIR)tosret.h \
#	 $(INCDIR)tosfns.h  $(INCDIR)inlineC.h
#	cc  $(DISPRFLAGS) -USPARCDISP -UOPDISP -DNOASM $(INLINE) -I$(INCDIR) $(SRCDIR)xc.c -o $(OBJECTDIR)xc.o
