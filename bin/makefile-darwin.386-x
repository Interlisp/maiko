# Options for MacOS, x86 processor, X windows

CC = clang -m32 -std=gnu89 -funsigned-char -fno-strict-aliasing
OEXT=.o

XFILES = $(OBJECTDIR)xmkicon.o \
	$(OBJECTDIR)xbbt.o \
	$(OBJECTDIR)dspif.o \
	$(OBJECTDIR)xinit.o \
	$(OBJECTDIR)xscroll.o \
	$(OBJECTDIR)xcursor.o \
	$(OBJECTDIR)xlspwin.o \
	$(OBJECTDIR)xrdopt.o \
	$(OBJECTDIR)xwinman.o


XVERSION = XV11R4
XFLAGS = -I/opt/X11/include -DXWINDOW -DNOPIXRECT -D$(XVERSION)

# OPTFLAGS is normally -O2.
OPTFLAGS =  -O2 -g
DISPOPTFLAGS = -O2 -g
FPFLAGS =
DEBUGFLAGS = # -DDEBUG -DOPTRACE
DFLAGS = $(DEBUGFLAGS) -DFSERROR -DNEW_STORAGE -DMACOSX -DOLD_CURSOR \
	-DBYTESWAP -DFORKCOMM -DNOFORN -DLOGINT  $(XFLAGS) \
	-DRELEASE=351 -DSTACKCHECK -DFSBCHECK -DPCTRACE

LDFLAGS = -L/opt/X11/lib -lX11 -lm
LDELDFLAGS =  -L/opt/X11/lib -lX11 -lm

INLINE = # $(SRCDIR)dspSPARC.il
BITBLTFILE = # $(OBJECTDIR)bbtSPARC.o
BYTESWAPFILES = $(OBJECTDIR)byteswap.o

OBJECTDIR = ../$(RELEASENAME)/

default	: ../$(OSARCHNAME)/lde ../$(OSARCHNAME)/ldex

############
#
#      Normal compilation for xc.o without optimized dispatch loop hacks
#
############
$(OBJECTDIR)xc.o:      $(SRCDIR)xc.c $(INCDIR)lispemul.h  $(INCDIR)emlglob.h \
	$(INCDIR)address.h \
	$(INCDIR)adr68k.h  $(INCDIR)stack.h  $(INCDIR)lspglob.h \
	$(INCDIR)lsptypes.h  $(INCDIR)lispmap.h  $(INCDIR)cell.h \
	$(INCDIR)initatms.h  $(INCDIR)gcdata.h  \
	$(INCDIR)arith.h $(INCDIR)stream.h \
	$(INCDIR)tos1defs.h  $(INCDIR)tosret.h \
	$(INCDIR)tosfns.h  $(INCDIR)inlineC.h
	$(CC) $(DISPRFLAGS) -UOPDISP  $(SRCDIR)xc.c -I$(INCDIR) -o $(OBJECTDIR)xc.o
