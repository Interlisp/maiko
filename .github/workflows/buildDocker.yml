#  based on https://blog.oddbit.com/post/2020-09-25-building-multi-architecture-im/
---
# Interlisp workflow to build a Docker Image that supports multiple architectures
name: 'Build Maiko Docker image'

# Run this workflow on push to master
# Other branches can be added it needed. 
on:
  push:
    branches:
      - master

#  Jobs that are run as part of this workflow.
jobs:
  # Job to build the docker image
  # see: https://github.com/docker/build-push-action
  docker:
    runs-on: ubuntu-latest
    steps:
      # Checkout the branch  
      - name: Checkout
        uses: actions/checkout@v2

      # Setup some environment variables
      - name: Prepare
        id: prep
        run: |
          # Name of the Docker Image. 
          DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}

          ## Do we want to use tags and or versions 
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=build_time::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      # Setup the Docker Machine Emulation environment.  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      # Setup the Docker Buildx funtion
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # Login into DockerHub - required to store the created image
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Start the Docker Build using the Dockerfile in the repository we
      # checked out.  
      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          build-args: BUILD_DATE=${{ steps.prep.outputs.build_time }}
          context: .
          file: ./Dockerfile
          # Platforms - Sepecify the platforms to include in the build
          #  linux/amd64 -- Standard x86_64
          #  linux/arm64 -- Apple M1
          #  linux/arm/v7 -- Raspberry pi
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          # Push the result to DockerHub
          push: true
          # tags to assign to the Docker image
          tags: ${{ steps.prep.outputs.tags }}